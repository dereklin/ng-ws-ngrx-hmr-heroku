{"version":3,"file":"captcha.js","sourceRoot":"","sources":["captcha.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ViewChild, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Component({\n    selector: 'p-captcha',\n    template: `<div #target></div>`\n})\nexport class Captcha implements AfterViewInit {\n\n    @Input() siteKey: string = null;\n        \n    @Input() theme = 'light';\n    \n    @Input() type = 'image';\n    \n    @Input() size = 'normal';\n    \n    @Input() tabindex = 0;\n    \n    @Input() language: string = null;\n    \n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('target') el: ElementRef;\n    \n    private _instance: any = null;\n\n    constructor(public _zone:NgZone) {}\n    \n    ngAfterViewInit() {\n        if((<any>window).grecaptcha)\n            this.init();\n        else\n            console.log(\"Recaptcha is not loaded\");\n    }\n    \n    init()Â {\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement, {\n            'sitekey': this.siteKey,\n            'theme': this.theme,\n            'type': this.type,\n            'size': this.size,\n            'tabindex': this.tabindex,\n            'hl': this.language,\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\n        });\n    }\n    \n    reset() {\n        if(this._instance === null)\n            return;\n        \n        (<any>window).grecaptcha.reset(this._instance);\n    }\n    \n    getResponse(): String {\n        if (this._instance === null)\n            return null;\n        \n        return (<any>window).grecaptcha.getResponse(this._instance);\n    }\n    \n    recaptchaCallback(response: string) {\n        this.onResponse.emit({\n            response: response\n        });\n    }\n\n    recaptchaExpiredCallback() {\n        this.onExpire.emit();\n    }\n    \n    ngOnDestroy() {\n        if (this._instance != null) {\n          (<any>window).grecaptcha.reset(this._instance);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Captcha],\n    declarations: [Captcha]\n})\nexport class CaptchaModule { }"]}