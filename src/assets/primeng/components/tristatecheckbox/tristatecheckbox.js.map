{"version":3,"file":"tristatecheckbox.js","sourceRoot":"","sources":["tristatecheckbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-tristatechkbox ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [name]=\"name\" [attr.tabindex]=\"tabindex\" readonly [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"\n                [ngClass]=\"{'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\">\n                <span class=\"ui-chkbox-icon fa ui-c\" [ngClass]=\"{'fa-check':value==true,'fa-close':value==false}\"></span>\n            </div>\n        </div>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR]\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n    \n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n    \n    @Input() name: string;\n\n    @Input() tabindex: number;\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n        \n    focus: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    onClick(event: Event, input: HTMLInputElement) {\n        if(!this.disabled) {\n            this.toggle(event);\n            this.focus = true;\n            input.focus();\n        }\n    }\n    \n    onKeydown(event: KeyboardEvent) {\n        if(event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n    \n    onKeyup(event: KeyboardEvent) {\n        if(event.keyCode == 32) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n    \n    toggle(event: Event) {\n        if(this.value == null || this.value == undefined)\n            this.value = true;\n        else if(this.value == true)\n            this.value = false;\n        else if(this.value == false)\n            this.value = null;\n            \n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n    \n    onFocus() {\n        this.focus = true;\n    }\n    \n    onBlur() {\n        this.focus = false;\n        this.onModelTouched();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    \n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }"]}